name: QuickFunctions Pull Request Validation

on:
  pull_request_target:
    branches: 
      - main

jobs:
  validate_pull_request:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: write
      issues: write

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests

    - name: Set up Node
      uses: actions/setup-node@v2
      with:
        node-version: '14'

    - name: Validate Changed Files
      id: validate_files
      run: |
        output=$(python utils/validate_changed_files.py)
        echo "changed_file_path=$(echo "$output" | sed -n 's/.*Changed files: //p')" >> $GITHUB_OUTPUT

    - name: Run Tests and Validate Output
      id: run_tests
      env: 
        GITHUB_REF: ${{github.ref}}
      run: |
        echo "Begin running tests"
        output=$(python utils/run_tests_and_validate_output.py)
        echo "log_output=$(echo "$output" | jq -sR .)" >> $GITHUB_OUTPUT
        echo "==== Test Output ===="
        echo "$output"
        echo "==== Raw log_output ===="
        echo "${{ steps.run_tests.outputs.log_output }}"
        echo "====================="

    - name: Comment on Pull Request
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PR_NUMBER: ${{ github.event.pull_request.number }}
        REPO: ${{ github.repository }}
      run: |
        python3 << EOF
        import os
        import requests
        import json

        # Get environment variables
        token = os.environ['GH_TOKEN']
        pr_number = os.environ['PR_NUMBER']
        repo = os.environ['REPO']

        # Get the comment body from the previous step's output
        comment_body = '''${{ steps.run_tests.outputs.log_output }}'''

        # Remove leading and trailing quotes
        comment_body=comment_body.strip("\"")
        
        if comment_body.startswith('0.0'):
            # remove 0.0 and newline
            comment_body = comment_body[4:]

        # Print comment body for debugging
        print("Comment body:")
        print(comment_body)
        print("----------------")

        # Construct the API URL
        api_url = f"https://api.github.com/repos/{repo}/issues/{pr_number}/comments"
        print(api_url)
        # Set up headers
        headers = {
            "Authorization": f"token {token}",
            "Accept": "application/vnd.github.v3+json"
        }

        # Make the API request
        response = requests.post(api_url, headers=headers, json={"body": comment_body})

        # Check the response
        if response.status_code == 201:
            print("Comment posted successfully")
        else:
            print(f"Failed to post comment. Status code: {response.status_code}")
            print(f"Response: {response.text}")
        EOF

    - name: Close PR (Tests Failed)
      if: ${{ !contains(steps.run_tests.outputs.log_output, 'Congratulations') }}
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "Tests failed. Closing PR."
        gh pr close ${{ github.event.pull_request.number }}

    - name: Merge PR and Update Leaderboard (Tests Passed)
      if: ${{ contains(steps.run_tests.outputs.log_output, 'Congratulations') }}
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "Tests passed. Merging PR and updating leaderboard."
        gh pr merge ${{ github.event.pull_request.number }} --merge
        
        git config --global user.email "actions@github.com"
        git config --global user.name "GitHub Actions"
        git fetch origin main
        git checkout main
        
        python utils/generate_leaderboard_table.py
        
        # Add all changes
        git add .
        
        # Remove files that don't end with README.md or leaderboard.txt
        # temporarily disabled
        # git diff --cached --name-only | grep -v -E '(README\.md|leaderboard\.txt)$' | xargs git reset HEAD
        
        git commit -m "Update leaderboard"
        git push origin main
